{"version":3,"sources":["services/storage.js","components/Header/index.js","components/Row/Row.js","components/Home/index.js","components/Row/Add.js","components/Row/Edit.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["getItem","key","defaultValue","item","localStorage","JSON","parse","setItem","value","stringify","getSessionItem","sessionStorage","setSessionItem","removeSessionItem","removeItem","Header","history","useHistory","className","onClick","push","to","onPress","window","location","reload","Row","props","index","title","onRowDelete","Home","useState","rowdata","setRowdata","useEffect","storedRows","console","log","items","i","new_array","Array","from","splice","deleteRow","length","renderRows","Add","setTitle","content","setContent","autoFocus","onChange","event","target","placeholder","onInput","storedData","filter","sd","Edit","params","useParams","changeRow","Routes","exact","path","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.235e6cfa.chunk.js","sourcesContent":["// LOCAL STORAGE\r\nexport function getItem(key, defaultValue) {\r\n    let item = localStorage.getItem(key);\r\n    if (item) {\r\n        item = JSON.parse(item);\r\n        return item;\r\n    }\r\n    return defaultValue;\r\n}\r\nexport function setItem(key, value) {\r\n    value = JSON.stringify(value);\r\n    localStorage.setItem(key, value);\r\n}\r\nexport function removeItem(key) {\r\n    localStorage.removeItem(key);\r\n}\r\n\r\n// SESSION STORAGE\r\nexport function getSessionItem(key, defaultValue) {\r\n    let item = sessionStorage.getItem(key);\r\n    if (item) {\r\n        item = JSON.parse(item);\r\n        return item;\r\n    }\r\n    return defaultValue;\r\n}\r\nexport function setSessionItem(key, value) {\r\n    value = JSON.stringify(value);\r\n    sessionStorage.setItem(key, value);\r\n}\r\nexport function removeSessionItem(key) {\r\n    sessionStorage.removeItem(key);\r\n}","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { removeItem, removeSessionItem } from '../../services/storage';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport './style.css';\r\n\r\n\r\nfunction Header() {\r\n    let history = useHistory();\r\n    function Clear() {\r\n        removeItem('rowdata');\r\n        history.push(\"/note-app/\");\r\n        window.location.reload();\r\n    }\r\n\r\n    function onClick() {\r\n        removeSessionItem('title');\r\n        removeSessionItem('content');\r\n        history.push(\"/note-app/\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"header-container\">\r\n            <button onClick={onClick} to=\"/note-app/\" className=\"title\" >Note Pad</button>\r\n            <AwesomeButton className=\"titlebutton\" onPress={Clear}>Clear All</AwesomeButton>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Row(props) {\r\n    const history = useHistory();\r\n\r\n    function onNoteClick() {\r\n        history.push('/note-app/edit/' + props.index);\r\n    }\r\n\r\n    return (\r\n        <div key={\"name\" + props.index} className=\"row-container\">\r\n            <p className=\"row-title\">\r\n                {props.value[0]}\r\n                <button title=\"Delete Note\" className=\"row-delete\" onClick={props.onRowDelete}>X</button>\r\n            </p>\r\n            <button title=\"Edit Note\" className=\"row-note\" onClick={onNoteClick}>\r\n                <p>{props.value[1]}</p>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\nexport default Row;","import React, { useState, useEffect } from 'react';\r\nimport './style.css';\r\nimport Row from '../Row/Row';\r\nimport { setItem, getItem } from '../../services/storage';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Home() {\r\n    const history = useHistory();\r\n    const [rowdata, setRowdata] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let storedRows = getItem('rowdata', []);\r\n        setRowdata(storedRows);\r\n    }, []);\r\n\r\n    function deleteRow(index) {\r\n        let new_array = Array.from(rowdata);\r\n        new_array.splice(index, 1);\r\n        setRowdata(new_array);\r\n        setItem('rowdata', new_array);\r\n    }\r\n\r\n    function renderRows() {\r\n        let items = [];\r\n        for (let i = 0; i < rowdata.length; i++) {\r\n            function onRowDelete() {\r\n                deleteRow(i);\r\n            }\r\n            if (rowdata[i][0] && rowdata[i][1]) {\r\n                items.push(\r\n                    <Row\r\n                        index={i}\r\n                        value={rowdata[i]}\r\n                        onRowDelete={onRowDelete}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    function onSubmit() {\r\n        console.log(\"hi\")\r\n        history.push('/note-app/add');\r\n    }\r\n    return (\r\n        <div className=\"home-container\">\r\n\r\n            <AwesomeButton className=\"awsbtn\" onPress={onSubmit}>Add a note</AwesomeButton>\r\n\r\n            <h1>Home Page</h1>\r\n            {renderRows()}\r\n        </div>\r\n    )\r\n}\r\nexport default Home;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { setSessionItem, getSessionItem, removeSessionItem, setItem, getItem } from '../../services/storage';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport './style.css';\r\n\r\nfunction Add() {\r\n    const [title, setTitle] = useState(getSessionItem('title', \"\"));\r\n    const [content, setContent] = useState(getSessionItem('content', \"\"));\r\n\r\n    const history = useHistory();\r\n\r\n    function onTitleChange(event) {\r\n        setTitle(event.target.value);\r\n        setSessionItem('title', event.target.value);\r\n    }\r\n    function onContentChange(event) {\r\n        setSessionItem('content', event.target.value);\r\n        setContent(event.target.value);\r\n    }\r\n    function onSubmit() {\r\n        //get the data from local storage\r\n        let storedData = getItem('rowdata', []);\r\n        //Make a new array, add new note and filter note if both fields are empty.\r\n        let new_array = [...storedData, [title, content]].filter(sd => sd[0] && sd[1]);\r\n        //store the new modified array in localstorage.\r\n        setItem('rowdata', new_array);\r\n\r\n        removeSessionItem('title');\r\n        removeSessionItem('content');\r\n\r\n        history.push('/note-app/');\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-container\">\r\n            <h1>Add a new Note</h1>\r\n            <input autoFocus onChange={onTitleChange} placeholder=\"Title\" value={title} />\r\n            <br />\r\n            <textarea onInput={onContentChange} placeholder=\"Content\" value={content} />\r\n            <br />\r\n            <AwesomeButton className=\"awsbtn\" onPress={onSubmit}>Add Note</AwesomeButton>\r\n        </div>\r\n    )\r\n}\r\nexport default Add;","import React, { useState } from 'react';\r\nimport './style.css';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { setItem, getItem } from '../../services/storage';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\n\r\nfunction Edit() {\r\n    const params = useParams();\r\n\r\n    const [title, setTitle] = useState(getItem('rowdata', [])[params.index][0]);\r\n    const [content, setContent] = useState(getItem('rowdata', [])[params.index][1]);\r\n\r\n    const history = useHistory();\r\n\r\n    function onTitleChange(event) {\r\n        setTitle(event.target.value);\r\n    }\r\n    function onContentChange(event) {\r\n        setContent(event.target.value);\r\n    }\r\n    function onSubmit() {\r\n        changeRow();\r\n        history.push('/note-app/');\r\n    }\r\n\r\n    function changeRow() {\r\n        let storedData = getItem('rowdata', []);\r\n        storedData[params.index] = [title, content];\r\n        setItem('rowdata', storedData);\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit-container\">\r\n            <h1>Edit Note</h1>\r\n            <input autoFocus onChange={onTitleChange} value={title} />\r\n            <br />\r\n            <textarea onChange={onContentChange} value={content} />\r\n            <br />\r\n            <AwesomeButton className=\"awsbtn\" onPress={onSubmit}>Save Note</AwesomeButton>\r\n        </div>\r\n    )\r\n}\r\nexport default Edit;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './Home/index';\r\nimport Add from './Row/Add';\r\nimport Edit from './Row/Edit';\r\nfunction Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/note-app/\">\r\n                <Home />\r\n            </Route>\r\n            <Route path=\"/note-app/Add\">\r\n                <Add />\r\n            </Route>\r\n            <Route path=\"/note-app/Edit/:index\">\r\n                <Edit />\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}\r\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/index';\nimport Routes from './components/Routes';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}